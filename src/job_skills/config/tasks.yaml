reporting_task:
  description: >
    Congratulations! You have been tasked with leading a research project on the essential skills for an Artificial Intelligence Engineer / Machine Learning Engineer.
    You are a reporting analyst. You will be given a list of skills that you will need to report on.
    For each skill in the provided list, you will use your tools to gain information about all of the skills.
    You will then use that information to create a comprehensive report that includes concrete definitions of the skill / technology, examples of how the skill is used in practice, and resources for the reader to learn about each skill and improve their expertise in each area.
    You will go beyond a surface level overview and provide a deep dive into each of the skills that are most in demand. 
    You will also provide advice for the user to understand each of the skills and be able to professionally discuss each skill in interviews. 
    For each skill in the report, you will provide a definition, examples, practical use cases, and resources for the job seeker to learn about each skill and improve their expertise in each area. 
    For each skill identified in the research:
      1. You provide a clear, concise definition of the skill, containing a high level of technical detail explaining the skill and its practical importance to the AI/ML Engineer job role
      2. You explain why the skill is valuable in the real-world, and how to use the skill in production-grade, enterprise-grade AI/ML workflows - with specific examples of how the skill is used in practice
      3. You outline a progressive learning path from beginner to advanced mastery
      4. You recommend specific resources (training courses, portfolio projects, certifications) with a preference for no-cost or low-cost resources
      5. You suggest methods to demonstrate proficiency to potential employers (portfolio projects, GitHub contributions, etc.)
    You will teach the user what each skill is and how it is used in the real world, and how to use it to advance their career.

    For all skills in the report, provide specific examples of how the skill is used in a real-world project. 
    Make sure to provide examples of the most common technologies and tools used to execute each skill. 
    Some skills are the names of technologies - i.e. "Python" or "SQL" or "AWS" - and you should provide examples of how the skill is used in a real-world project.
    Some skills are more complex than others, and you should provide examples of how the skill is used in a real-world project.
    For each skill, provide a list of accessible resources (documentation, courses, projects, certifications) for learning the skill.
    This report should function as a comprehensive instructional guide and learning resource for the user to learn the most in-demand skills for an Artificial Intelligence Engineer / Machine Learning Engineer. 
    Direct the reader to the official documentation for each skill if available. 
    Direct the reader to the most popular resources for learning each skill if available.  
    Tell the reader how to demonstrate proficiency in the skill.
    If the skill is a technology, provide a link to the official documentation of the skill.
    If the skill is a technology, provide information on how to install it and set it up.

    In order to achieve this, you have access to a few tools that are described below.
    You can use these tools as many times as you need to.
    You can not submit more than one query at a time. If you need to run multiple queries, you must submit them sequentially, one at a time.
    The groups of skills should be sorted into the order in which they should be learned, so that foundational skills are listed first, and more complex skills are listed last.

    You may use the HowDoI tool to find code solutions and examples for each of the skills in the list.
    The HowDoI tool provides code examples from Stack Overflow that demonstrate how to implement various programming techniques.
    The correct input format for the HowDoI tool is a dictionary with a key of "query" and a value of the search term like this Query: 'python sort dictionary by value'.
    The howdoi tool is free to use, so you can use it as many times as you need.
    You can not submit more than one query at a time. If you need to run multiple queries, you must submit them sequentially, one at a time.
    HowDoI should only be used to search for relatively simple programming terms or phrases like Query: 'python sort dictionary by value' or 'python implement a queue' or 'python convert dictionary to json' etc.
    HowDoI should be used to search for programming solutions or technical answers to coding questions.
    You should use the HowDoI tool to find programming solutions for each of the specific skills in the list.
    For each programming task required for each of these skills, use the HowDoI tool to find practical code examples.
    For each programming language, framework, or technology identified, use the HowDoI tool to find examples of:
    1. How to implement basic data structures
    2. How to perform common operations
    3. How to optimize code for performance
    4. How to handle errors and exceptions
    5. How to write code to solve the task
    All queries sent to howdoi begin with the command word "howdoi " - meaning a query can look like "howdoi loop over a list of files in python" or something like that, but the tool itself already begins each query with the howdoi command.
    So, all queries to howdoi should consider this format assuming they're all prefeixed with the "howdoi " command.
    You should ask it questions like "Query": "make neural network for predicting stock prices" or "Query": "make neural network for predicting home prices" etc.
    You can also search for things like "Query": "write algorithm for customer segmentation" or "Query": "create algorithm for predicting stock prices" etc.
    You can ask simple things too, such as "Query": "sort dictionary by value in python" or "Query": "implement a queue in python" etc.
    HowDoI responds best to simple queries like "Query": "python sort dictionary by value" or "Query": "python implement a queue" etc.

    You may use the Wikipedia Search tool to reference the definition of the specific skills in the list.
    The correct input format for the wikipedia search tool is a dictionary with a key of "query" and a value of the search term.
    The wikipedia tool is free to use, so you can use it as many times as you need.
    You can not submit more than one query at a time. If you need to run multiple queries, you must submit them sequentially, one at a time.
    Wikipedia should only be used to search for single terms such as "Python" or "Machine Learning" or "Deep Learning" etc.
    Wikipedia should not be used to search for phrases or questions or compound terms.
    Wikipedia should only be used to search for definitions of single terms or concepts.

    You may use the AI/ML Search Engine tool to use the serper api to search the web. 
    You can use this tool tosearch the web to find official documentation and up-to-date information about each skill in the list.
    This tool is particularly useful for finding links to official documentation, tutorials, and recent developments for each skill.
    For each skill in your list, use this tool to search for terms like "official documentation for [skill]" or "[skill] tutorial" or "[skill] best practices" or "[skill] API reference" or "[skill] website".
    The tool will return both search results and a summary ofthe actual content from the top websites, giving you comprehensive information.
    Use this tool to gather high-level summary information directly from official sources rather than relying on general knowledge.
    The tool works best with specific, focused queries rather than broad questions.
    For programming languages and frameworks, search for their official documentation, API references, and getting started guides.
    For concepts and methodologies, search for academic papers, industry standards, and best practice guides.
    The information retrieved from this tool should be used to provide accurate, up-to-date details about each skill in your report.

    Next, use the Perplexity tool to include supplemental knowledge about each group of skills.
    For each category / group of skills, pass the entire list to perplexity and have perplexity teach you a comprehensive lesson on how these grouped skills are all used together.
    The correct input format for perplexity is a dictionary with a key of "query" and a value of the search term.
    The perplexity tool is more expensive to use, so you should only use one query for each group / category at a time - i.e. one query per complete group of skills.
    The output from perplexity is a long paragraph of text that you should use to augment the report for each skill, and to provide more context for how these skills are used together.
    Perplexity can handle more complex natural language prompts and questions.
    Your query could look like this: {"query": """
    Provide a detailed explanation of the following skills and technologies. 
    Thoroughly describe how they would be used in an AI/ML Engineer's job.
    Include practical examples of how each of these skills work together, the order in which they're used, how they interact, and how they're used in real-world projects.
    If any terms in this list are redundant or serve the exact same purpose, indicate that in your response.
      - Machine Learning Techniques:
        - Large Language Models (LLMs)
        - Natural Language Processing (NLP)
        - Deep Learning Neural Networks
        - Fine-Tuning Neural Network Parameters
        - Transfer Learning
        - Model Training
        - Model Evaluation
        - Model Deployment
        - Model Monitoring
        - Model Inference
        - Model Serving
        - Model Optimization
        - Computer Vision
        - Predictive Modeling
        - Classification Algorithms
        - Regression Algorithms
        - Clustering Algorithms
        - Decision Trees
        - Random Forests
        - Gradient Boosting
        - Deployment Frameworks
        - Building neural networks with PyTorch
        - Building neural networks with TensorFlow
        - Building neural networks with Keras
        - Building neural networks with Scikit-learn
    """}
  expected_output: >
    A full report of each skill in the list. 
    The report should include all of the main topics from the list - each skill should be expanded upon with a full section of information (details for the required information are below).
    For each skill, include details such as:
    - Technologies in which the skill is used
    - If the skill is a technology, provide a link to the official documentation of the skill
    - If the skill is a technology, provide information on how to install it and set it up
    - If the skill includes programming, include some code examples for commonly used tasks required by the skill
    - If the skill involves deliverable code, explain how the code would be deployed / hosted / run / executed in production
    - If the skill involves deliverable code, explain how the developer would go from developing it to deploying it into production    
    - If the skill involves deliverable code, explain how the developer would test the code and validate it is working as expected
    - If the skill involves deliverable code, explain how the developer would implement CI/CD for the project
    - A description of what the skill is and how it is used, both in a general sense in layman's terms and in technical terms that an AI/ML Engineer would use in their work
    - Examples of how the skill is used in a real-world project
    - Popular resources for learning the skill
    - Practical examples of the skill being applied in a real-world project
    The report should be formatted as markdown
    You must include all of the skills in the list provided by the researcher.
    Do not truncate or cut your output short. You need to provide a comprehensive report for each skill. You may group skills together if they are similar or redundant.
    Make sure you include any interesting and relevant information given the current year is 2025 and the user needs practical real-world examples for using all of these skills as an AI/ML Engineer.

    Your output should include all of these topics and be structured something like this. 
    These categories and skills are the basis you should begin with, and then augment / append based on your findings.

      - Programming Languages:
        - Python
        - Java
        - JavaScript
        - R
        - SQL
        - TypeScript
        - Rust
        - C
        - C#
        - C++

      - AI/ML Frameworks and Libraries:
        - TensorFlow
        - PyTorch
        - Pandas
        - Scikit-learn
        - Keras
        - Hadoop
        - Transformers
        - NLTK
        - SpaCy

      - Python Frameworks and Libraries:
        - Flask
        - Django
        - FastAPI

      - Frontend Frameworks and Libraries:
        - React.js
        - Next.js

      - Data Engineering, ETL, Data Pipeline, and Data Processing Tools:
        - Extract, Transform, Load (ETL)
        - Data Engineering
        - Database Stored Procedures
        - Database Triggers
        - Database Indexes
        - Data Modeling
        - Data Architecture
        - Data Governance
        - Data Quality
        - Data Pipelines
        - Data Processing
        - Data Transformation
        - Data Loading
        - Data Automation
        - Apache Airflow
        - Informatica
        - Apache Kafka
        - Data Warehousing
        - Data Marts
        - Data Lakes
        - Data Processing, Transformation, and Loading
        
      - Cloud Platforms:
        - Amazon Web Services (AWS)
        - Microsoft Azure
        - Google Cloud Platform (GCP)
        - Snowflake
        - Databricks
        - Azure Synapse
        - Azure Data Factory
        - Azure Data Lake
        - Azure Data Warehouse
        - Azure Data Mesh

      - Containerization, Deployment, CI/CD and DevOps Tools:
        - MLOps
        - Kubernetes
        - Docker
        - Jenkins
        - Git
        - GitHub
        - Vercel
        - AWS Deployment Tools
        - Azure Deployment Tools
        - Google Cloud Deployment Tools

      - Machine Learning Techniques:
        - Large Language Models (LLMs)
        - Natural Language Processing (NLP)
        - Deep Learning Neural Networks
        - Fine-Tuning Neural Network Hyperparameters
        - Transfer Learning
        - Model Training
        - Model Evaluation
        - Model Deployment
        - Model Monitoring
        - Model Inference
        - Model Serving
        - Model Optimization
        - Computer Vision
        - Predictive Modeling
        - Classification Algorithms
        - Regression Algorithms
        - Clustering Algorithms
        - Decision Trees
        - Random Forests
        - Gradient Boosting
        - Deployment Frameworks
        - Building neural networks with PyTorch
        - Building neural networks with TensorFlow
        - Building neural networks with Keras
        - Building neural networks with Scikit-learn

      - Artificial Intelligence:
        - AI Agents
        - AI Agent Orchestration Frameworks
        - Chatbot Frameworks
        - RAG Frameworks
        - Machine Tools
        - Transformers
        - AI Ethics and Bias
        - Knowledge Graph RAG
        - Embedding Models
        - LLM Models
        - Agentic Chain of Thought
        - Prompt Engineering
        - Image Processing
        - Natural Language Processing

      - Data Science:
        - Statistics
        - Data Analysis
        - JuPyter Notebooks
        - Data Science Frameworks
        - Data Visualization
        - Data Preprocessing
        - Data Wrangling
        - Data Cleaning
        
      - Software Engineering and Domain Knowledge:
        - Software Development
        - Business Intelligence (BI)
        - Pattern Recognition
        - Generative AI
        - Computer Science
        - Code Reviews
        - Software Engineering
        - Embedded Systems
        - Cloud Computing
        - Big Data
        - Distributed Systems

      - Specific Examples of Key Skill Usage in Real-World Projects:
        - Data Pipeline Implementation
        - Data Engineering - curating a dataset of home sale price data to trian a machine learning model to predict home prices
        - Development of Custom ML Models
        - Machine Learning - using the curated home sale price dataset to train a machine learning model to predict home prices
        - Deep Learning - using the curated home sale price dataset to train a deep learning model to predict home prices
        - AI App Development - use the sale price dataset and ML models to develop an AI-powered chat agent app with tools to discuss predictions for home prices with a user
  agent: reporting_analyst

research_task:
  description: >
    You will curate a comprehensive, thorough, extensive, detailed, and deep list of the most in-demand skills for Artificial Intelligence Engineer and Machine Learning Engineer roles. 
    You will be examining the existing list, augmenting it with your own recommendations, and then organizing the skills into optimal categories for progressive learning and career advancement.

    First, group the skills into logical categories.
    The list should follow a logical progression of skills that an AI/ML Engineer would need to learn, in order, to continually advance in their career.
    The groups of skills should be listed in the order in which they should be learned, so that foundational skills are listed first, and more complex skills are listed last.

    Next, use the HowDoI tool to find code solutions and examples for each of the skills in the list.
    The HowDoI tool provides code examples from Stack Overflow that demonstrate how to implement various programming techniques.
    The correct input format for the HowDoI tool is a dictionary with a key of "query" and a value of the search term like this Query: 'python sort dictionary by value'.
    The howdoi tool is free to use, so you can use it as many times as you need.
    You can not submit more than one query at a time. If you need to run multiple queries, you must submit them sequentially, one at a time.
    HowDoI should only be used to search for relatively simple programming terms or phrases like Query: 'python sort dictionary by value' or 'python implement a queue' or 'python convert dictionary to json' etc.
    HowDoI should be used to search for programming solutions or technical answers to coding questions.
    You should use the HowDoI tool to find programming solutions for each of the specific skills in the list.
    For each programming task required for each of these skills, use the HowDoI tool to find practical code examples.
    For each programming language, framework, or technology identified, use the HowDoI tool to find examples of:
    1. How to implement basic data structures
    2. How to perform common operations
    3. How to optimize code for performance
    4. How to handle errors and exceptions
    5. How to write code to solve the task
    All queries sent to howdoi begin with the command word "howdoi " - meaning a query can look like "howdoi loop over a list of files in python" or something like that, but the tool itself already begins each query with the howdoi command.
    So, all queries to howdoi should consider this format assuming they're all prefeixed with the "howdoi " command.
    You should ask it questions like "Query": "make neural network for predicting stock prices" or "Query": "make neural network for predicting home prices" etc.
    You can also search for things like "Query": "write algorithm for customer segmentation" or "Query": "create algorithm for predicting stock prices" etc.
    You can ask simple things too, such as "Query": "sort dictionary by value in python" or "Query": "implement a queue in python" etc.
    HowDoI responds best to simple queries like "Query": "python sort dictionary by value" or "Query": "python implement a queue" etc.

    Next, use the Wikipedia Search tool to reference the definition of the specific skills in the list.
    The correct input format for the wikipedia search tool is a dictionary with a key of "query" and a value of the search term.
    The wikipedia tool is free to use, so you can use it as many times as you need.
    You can not submit more than one query at a time. If you need to run multiple queries, you must submit them sequentially, one at a time.
    Wikipedia should only be used to search for single terms such as "Python" or "Machine Learning" or "Deep Learning" etc.
    Wikipedia should not be used to search for phrases or questions or compound terms.
    Wikipedia should only be used to search for definitions of single terms or concepts.

    Next, use the AI/ML Search Engine tool to use the serper api to find official documentation and up-to-date information about each skill in the list.
    The AI/ML Search Engine tool searches the web for information about AI/ML topics, technologies, frameworks, and concepts.
    This tool is particularly useful for finding official documentation, tutorials, and recent developments for each skill.
    For each skill in your list, use this tool to search for terms like "official documentation for [skill]" or "[skill] tutorial" or "[skill] best practices".
    The tool will return both search results and the actual content from the top websites, giving you comprehensive information.
    Use this tool to gather authoritative information directly from official sources rather than relying on general knowledge.
    The tool works best with specific, focused queries rather than broad questions.
    For programming languages and frameworks, search for their official documentation, API references, and getting started guides.
    For concepts and methodologies, search for academic papers, industry standards, and best practice guides.
    The information retrieved from this tool should be used to provide accurate, up-to-date details about each skill in your report.

    Next, use the Perplexity tool to include supplemental knowledge about each group of skills.
    For each category / group of skills, pass the entire list to perplexity and have perplexity teach you a comprehensive lesson on how these grouped skills are all used together.
    The correct input format for perplexity is a dictionary with a key of "query" and a value of the search term.
    The perplexity tool is more expensive to use, so you should only use one query for each group / category at a time - i.e. one query per complete group of skills.
    The output from perplexity is a long paragraph of text that you should use to augment the report for each skill, and to provide more context for how these skills are used together.
    Perplexity can handle more complex natural language prompts and questions.
    Your query could look like this: {"query": """
    Provide a detailed explanation of the following skills and technologies. 
    Thoroughly describe how they would be used in an AI/ML Engineer's job.
    Include practical examples of how each of these skills work together, the order in which they're used, how they interact, and how they're used in real-world projects.
    If any terms in this list are redundant or serve the exact same purpose, indicate that in your response.
      - Machine Learning Techniques:
        - Large Language Models (LLMs)
        - Natural Language Processing (NLP)
        - Deep Learning Neural Networks
        - Fine-Tuning Neural Network Parameters
        - Transfer Learning
        - Model Training
        - Model Evaluation
        - Model Deployment
        - Model Monitoring
        - Model Inference
        - Model Serving
        - Model Optimization
        - Computer Vision
        - Predictive Modeling
        - Classification Algorithms
        - Regression Algorithms
        - Clustering Algorithms
        - Decision Trees
        - Random Forests
        - Gradient Boosting
        - Deployment Frameworks
        - Building neural networks with PyTorch
        - Building neural networks with TensorFlow
        - Building neural networks with Keras
        - Building neural networks with Scikit-learn
    """}
  expected_output: >
    A grouped list of bullet points containing a comprehensive list of essential skills for an AI/ML Engineer.
    The list should follow a logical progression of skills that an AI/ML Engineer would need to learn to be successful in their career.
    The skills should be listed in the order in which they should be learned, so that foundational skills are listed first, and more complex skills are listed last.

    Your output should include all of these topics and be structured something like this. 
    These categories and skills are the basis you should begin with, and then augment / append based on your findings.

      - Programming Languages:
        - Python
        - Java
        - JavaScript
        - R
        - SQL
        - TypeScript
        - Rust
        - C
        - C#
        - C++

      - AI/ML Frameworks and Libraries:
        - TensorFlow
        - PyTorch
        - Pandas
        - Scikit-learn
        - Keras
        - Hadoop
        - Transformers
        - NLTK
        - SpaCy

      - Python Frameworks and Libraries:
        - Flask
        - Django
        - FastAPI

      - Frontend Frameworks and Libraries:
        - React.js
        - Next.js

      - Data Engineering, ETL, Data Pipeline, and Data Processing Tools:
        - Extract, Transform, Load (ETL)
        - Data Engineering
        - Database Stored Procedures
        - Database Triggers
        - Database Indexes
        - Data Modeling
        - Data Architecture
        - Data Governance
        - Data Quality
        - Data Pipelines
        - Data Processing
        - Data Transformation
        - Data Loading
        - Data Automation
        - Apache Airflow
        - Informatica
        - Apache Kafka
        - Data Warehousing
        - Data Marts
        - Data Lakes
        - Data Processing, Transformation, and Loading
        
      - Cloud Platforms:
        - Amazon Web Services (AWS)
        - Microsoft Azure
        - Google Cloud Platform (GCP)
        - Snowflake
        - Databricks
        - Azure Synapse
        - Azure Data Factory
        - Azure Data Lake
        - Azure Data Warehouse
        - Azure Data Mesh

      - Containerization, Deployment, CI/CD and DevOps Tools:
        - MLOps
        - Kubernetes
        - Docker
        - Jenkins
        - Git
        - GitHub
        - Vercel
        - AWS Deployment Tools
        - Azure Deployment Tools
        - Google Cloud Deployment Tools

      - Machine Learning Techniques:
        - Large Language Models (LLMs)
        - Natural Language Processing (NLP)
        - Deep Learning Neural Networks
        - Fine-Tuning Neural Network Hyperparameters
        - Transfer Learning
        - Model Training
        - Model Evaluation
        - Model Deployment
        - Model Monitoring
        - Model Inference
        - Model Serving
        - Model Optimization
        - Computer Vision
        - Predictive Modeling
        - Classification Algorithms
        - Regression Algorithms
        - Clustering Algorithms
        - Decision Trees
        - Random Forests
        - Gradient Boosting
        - Deployment Frameworks

      - Artificial Intelligence:
        - AI Agents
        - AI Agent Orchestration Frameworks
        - Chatbot Frameworks
        - RAG Frameworks
        - Machine Tools
        - Transformers
        - AI Ethics and Bias
        - Knowledge Graph RAG
        - Embedding Models
        - LLM Models
        - Agentic Chain of Thought
        - Prompt Engineering
        - Image Processing
        - Natural Language Processing

      - Data Science:
        - Statistics
        - Data Analysis
        - JuPyter Notebooks
        - Data Science Frameworks
        - Data Visualization
        - Data Preprocessing
        - Data Wrangling
        - Data Cleaning
        
      - Software Engineering and Domain Knowledge:
        - Software Development
        - Business Intelligence (BI)
        - Pattern Recognition
        - Generative AI
        - Computer Science
        - Code Reviews
        - Software Engineering
        - Embedded Systems
        - Cloud Computing
        - Big Data
        - Distributed Systems

      - Specific Examples of Key Skill Usage in Real-World Projects:
        - Data Pipeline Implementation
        - Data Engineering - curating a dataset of home sale price data to trian a machine learning model to predict home prices
        - Development of Custom ML Models
        - Machine Learning - using the curated home sale price dataset to train a machine learning model to predict home prices
        - Deep Learning - using the curated home sale price dataset to train a deep learning model to predict home prices
        - AI App Development - use the sale price dataset and ML models to develop an AI-powered chat agent app with tools to discuss predictions for home prices with a user
  agent: researcher

skill_instructor_task:
  description: >
    You are an expert in the field of AI/ML Engineering.
    You are given a report containing lists of AI/ML Engineering skills and their corresponding explanations / resources. This report was created by the reporting analyst on your team.
    You will enhance the report created by the reporting analyst with a detailed guide (instructions, technical details, and implementation examples) for each skill identified in the research. 
    Include code examples or implementation instructions, highly detailed explanations of the skill's workflow, and practical use cases for each skill. 

    First, use the perplexity tool to get a better sense of how engineers are can learn and use the most relevant skills for an Artificial Intelligence Engineer / Machine Learning Engineer in 2025.

    Make sure that you provide information for every relevant skill in the list.

    For each skill in the report:
      1. You will provide a comprehensive technical breakdown that goes beyond surface-level explanations
      2. You will include multiple code examples showing both basic implementation and advanced usage patterns
      3. You will explain common pitfalls and how to avoid them based on your extensive experience
      4. You will demonstrate how the skill integrates with other technologies in the AI/ML ecosystem
      5. You will outline specific industry use cases where this skill creates significant business value
      6. You will provide debugging tips and performance optimization techniques
      7. You will explain how to test and validate implementations using this skill
    
    Your code examples will be production-quality, following best practices for:
      - Code organization and structure
      - Error handling and edge cases
      - Documentation and commenting
      - Performance considerations
      - Security considerations where applicable

    You will tailor your explanations to different experience levels, providing:
      - Entry-level examples that focus on fundamentals
      - Intermediate examples that introduce more complex patterns
      - Advanced examples that demonstrate cutting-edge techniques
    
    You will connect each skill to real job responsibilities by:
      - Explaining how the skill is used in day-to-day work
      - Showing how it fits into larger engineering workflows
      - Demonstrating how it helps solve business problems

    You will leverage the research conducted by the researcher and reporting analyst to create a detailed guide for each skill identified in the research. 
    You will include code examples, highly detailed explanations of workflow, and practical use cases for each skill. 
    You will provide a roadmap and set of instructions for job seekers to improve their skills and prepare for interviews. 

    The year is 2025. Your guide must be up to date with the latest skills and trends in the AI/ML space, including:
      - The latest frameworks and libraries
      - Current best practices and design patterns
      - Modern deployment and operational considerations
      - Emerging techniques that are gaining industry adoption

    First, group the skills into logical categories.
    The list should follow a logical progression of skills that an AI/ML Engineer would need to learn, in order, to continually advance in their career.
    The groups of skills should be listed in the order in which they should be learned, so that foundational skills are listed first, and more complex skills are listed last.

    Next, use the HowDoI tool to find code solutions and examples for each of the skills in the list.
    The HowDoI tool provides code examples from Stack Overflow that demonstrate how to implement various programming techniques.
    The correct input format for the HowDoI tool is a dictionary with a key of "query" and a value of the search term like this Query: 'python sort dictionary by value'.
    The howdoi tool is free to use, so you can use it as many times as you need.
    You can not submit more than one query at a time. If you need to run multiple queries, you must submit them sequentially, one at a time.
    HowDoI should only be used to search for relatively simple programming terms or phrases like Query: 'python sort dictionary by value' or 'python implement a queue' or 'python convert dictionary to json' etc.
    HowDoI should be used to search for programming solutions or technical answers to coding questions.
    You should use the HowDoI tool to find programming solutions for each of the specific skills in the list.
    For each programming task required for each of these skills, use the HowDoI tool to find practical code examples.
    For each programming language, framework, or technology identified, use the HowDoI tool to find examples of:
    1. How to implement basic data structures
    2. How to perform common operations
    3. How to optimize code for performance
    4. How to handle errors and exceptions
    5. How to write code to solve the task
    All queries sent to howdoi begin with the command word "howdoi " - meaning a query can look like "howdoi loop over a list of files in python" or something like that, but the tool itself already begins each query with the howdoi command.
    So, all queries to howdoi should consider this format assuming they're all prefeixed with the "howdoi " command.
    You should ask it questions like "Query": "make neural network for predicting stock prices" or "Query": "make neural network for predicting home prices" etc.
    You can also search for things like "Query": "write algorithm for customer segmentation" or "Query": "create algorithm for predicting stock prices" etc.
    You can ask simple things too, such as "Query": "sort dictionary by value in python" or "Query": "implement a queue in python" etc.
    HowDoI responds best to simple queries like "Query": "python sort dictionary by value" or "Query": "python implement a queue" etc.

    Next, use the Wikipedia Search tool to reference the definition of the specific skills in the list.
    The correct input format for the wikipedia search tool is a dictionary with a key of "query" and a value of the search term.
    The wikipedia tool is free to use, so you can use it as many times as you need.
    You can not submit more than one query at a time. If you need to run multiple queries, you must submit them sequentially, one at a time.
    Wikipedia should only be used to search for single terms such as "Python" or "Machine Learning" or "Deep Learning" etc.
    Wikipedia should not be used to search for phrases or questions or compound terms.
    Wikipedia should only be used to search for definitions of single terms or concepts.

    Next, use the AI/ML Search Engine tool to use the serper api to find official documentation and up-to-date information about each skill in the list.
    The AI/ML Search Engine tool searches the web for information about AI/ML topics, technologies, frameworks, and concepts.
    This tool is particularly useful for finding official documentation, tutorials, and recent developments for each skill.
    For each skill in your list, use this tool to search for terms like "official documentation for [skill]" or "[skill] tutorial" or "[skill] best practices".
    The tool will return both search results and the actual content from the top websites, giving you comprehensive information.
    Use this tool to gather authoritative information directly from official sources rather than relying on general knowledge.
    The tool works best with specific, focused queries rather than broad questions.
    For programming languages and frameworks, search for their official documentation, API references, and getting started guides.
    For concepts and methodologies, search for academic papers, industry standards, and best practice guides.
    The information retrieved from this tool should be used to provide accurate, up-to-date details about each skill in your report.

    Next, use the Perplexity tool to include supplemental knowledge about each group of skills.
    For each category / group of skills, pass the entire list to perplexity and have perplexity teach you a comprehensive lesson on how these grouped skills are all used together.
    The correct input format for perplexity is a dictionary with a key of "query" and a value of the search term.
    The perplexity tool is more expensive to use, so you should only use one query for each group / category at a time - i.e. one query per complete group of skills.
    The output from perplexity is a long paragraph of text that you should use to augment the report for each skill, and to provide more context for how these skills are used together.
    Perplexity can handle more complex natural language prompts and questions.
    Your query could look like this: {"query": """
    Provide a detailed explanation of the following skills and technologies. 
    Thoroughly describe how they would be used in an AI/ML Engineer's job.
    Include practical examples of how each of these skills work together, the order in which they're used, how they interact, and how they're used in real-world projects.
    If any terms in this list are redundant or serve the exact same purpose, indicate that in your response.
      - Machine Learning Techniques:
        - Large Language Models (LLMs)
        - Natural Language Processing (NLP)
        - Deep Learning Neural Networks
        - Fine-Tuning Neural Network Parameters
        - Transfer Learning
        - Model Training
        - Model Evaluation
        - Model Deployment
        - Model Monitoring
        - Model Inference
        - Model Serving
        - Model Optimization
        - Computer Vision
        - Predictive Modeling
        - Classification Algorithms
        - Regression Algorithms
        - Clustering Algorithms
        - Decision Trees
        - Random Forests
        - Gradient Boosting
        - Deployment Frameworks
        - Building neural networks with PyTorch
        - Building neural networks with TensorFlow
        - Building neural networks with Keras
        - Building neural networks with Scikit-learn
    """}
  expected_output: >
    A detailed learning / developmentguide for each skill in the research list, formatted as markdown.
    The guide should include instructions, technical details, and implementation examples for each skill.
    For each skill, include details such as:
    - Technologies in which the skill is used
    - If the skill is a technology, provide a link to the official documentation of the skill
    - If the skill is a technology, provide information on how to install it and set it up
    - If the skill includes programming, include some code examples for commonly used tasks required by the skill
    - If the skill involves deliverable code, explain how the code would be deployed / hosted / run / executed in production
    - If the skill involves deliverable code, explain how the developer would go from developing it to deploying it into production    
    - If the skill involves deliverable code, explain how the developer would test the code and validate it is working as expected
    - If the skill involves deliverable code, explain how the developer would implement CI/CD for the project
    - A description of what the skill is and how it is used, both in a general sense in layman's terms and in technical terms that an AI/ML Engineer would use in their work
    - Examples of how the skill is used in a real-world project
    - Popular resources for learning the skill
    - Practical examples of the skill being applied in a real-world project
    Formatted as markdown
    You must include all of the skills in the list provided by the researcher.
    Do not truncate or cut your output short. You need to provide a comprehensive report for each skill. You may group skills together if they are similar or redundant.

    Your output should include all of these topics and be structured something like this. 
    These categories and skills are the basis you should begin with, and then augment / append based on your findings.

      - Programming Languages:
        - Python
        - Java
        - JavaScript
        - R
        - SQL
        - TypeScript
        - Rust
        - C
        - C#
        - C++

      - AI/ML Frameworks and Libraries:
        - TensorFlow
        - PyTorch
        - Pandas
        - Scikit-learn
        - Keras
        - Hadoop
        - Transformers
        - NLTK
        - SpaCy

      - Python Frameworks and Libraries:
        - Flask
        - Django
        - FastAPI

      - Frontend Frameworks and Libraries:
        - React.js
        - Next.js

      - Data Engineering, ETL, Data Pipeline, and Data Processing Tools:
        - Extract, Transform, Load (ETL)
        - Data Engineering
        - Database Stored Procedures
        - Database Triggers
        - Database Indexes
        - Data Modeling
        - Data Architecture
        - Data Governance
        - Data Quality
        - Data Pipelines
        - Data Processing
        - Data Transformation
        - Data Loading
        - Data Automation
        - Apache Airflow
        - Informatica
        - Apache Kafka
        - Data Warehousing
        - Data Marts
        - Data Lakes
        - Data Processing, Transformation, and Loading
        
      - Cloud Platforms:
        - Amazon Web Services (AWS)
        - Microsoft Azure
        - Google Cloud Platform (GCP)
        - Snowflake
        - Databricks
        - Azure Synapse
        - Azure Data Factory
        - Azure Data Lake
        - Azure Data Warehouse
        - Azure Data Mesh

      - Containerization, Deployment, CI/CD and DevOps Tools:
        - MLOps
        - Kubernetes
        - Docker
        - Jenkins
        - Git
        - GitHub
        - Vercel
        - AWS Deployment Tools
        - Azure Deployment Tools
        - Google Cloud Deployment Tools

      - Machine Learning Techniques:
        - Large Language Models (LLMs)
        - Natural Language Processing (NLP)
        - Deep Learning Neural Networks
        - Fine-Tuning Neural Network Hyperparameters
        - Transfer Learning
        - Model Training
        - Model Evaluation
        - Model Deployment
        - Model Monitoring
        - Model Inference
        - Model Serving
        - Model Optimization
        - Computer Vision
        - Predictive Modeling
        - Classification Algorithms
        - Regression Algorithms
        - Clustering Algorithms
        - Decision Trees
        - Random Forests
        - Gradient Boosting
        - Deployment Frameworks

      - Artificial Intelligence:
        - AI Agents
        - AI Agent Orchestration Frameworks
        - Chatbot Frameworks
        - RAG Frameworks
        - Machine Tools
        - Transformers
        - AI Ethics and Bias
        - Knowledge Graph RAG
        - Embedding Models
        - LLM Models
        - Agentic Chain of Thought
        - Prompt Engineering
        - Image Processing
        - Natural Language Processing

      - Data Science:
        - Statistics
        - Data Analysis
        - JuPyter Notebooks
        - Data Science Frameworks
        - Data Visualization
        - Data Preprocessing
        - Data Wrangling
        - Data Cleaning
        
      - Software Engineering and Domain Knowledge:
        - Software Development
        - Business Intelligence (BI)
        - Pattern Recognition
        - Generative AI
        - Computer Science
        - Code Reviews
        - Software Engineering
        - Embedded Systems
        - Cloud Computing
        - Big Data
        - Distributed Systems

      - Specific Examples of Key Skill Usage in Real-World Projects:
        - Data Pipeline Implementation
        - Data Engineering - curating a dataset of home sale price data to trian a machine learning model to predict home prices
        - Development of Custom ML Models
        - Machine Learning - using the curated home sale price dataset to train a machine learning model to predict home prices
        - Deep Learning - using the curated home sale price dataset to train a deep learning model to predict home prices
        - AI App Development - use the sale price dataset and ML models to develop an AI-powered chat agent app with tools to discuss predictions for home prices with a user
  agent: skill_instructor
