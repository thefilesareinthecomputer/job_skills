=== SCRAPED CONTENT FROM: 2.3. Clustering — scikit-learn 1.6.1 documentation ===

URL: https://scikit-learn.org/stable/modules/clustering.html

CONTENT:
--------------------------------------------------------------------------------
2.3. Clustering # Clustering of unlabeled data can be performed with the module sklearn.cluster . Each clustering algorithm comes in two variants: a class, that implements the fit method to learn the clusters on train data, and a function, that, given train data, returns an array of integer labels corresponding to the different clusters. For the class, the labels over the training data can be found in the labels_ attribute. Input data One important thing to note is that the algorithms implemented in this module can take different kinds of matrix as input. All the methods accept standard data matrices of shape (n_samples, n_features) . These can be obtained from the classes in the sklearn.feature_extraction module. For AffinityPropagation , SpectralClustering and DBSCAN one can also input similarity matrices of shape (n_samples, n_samples) . These can be obtained from the functions in the sklearn.metrics.pairwise module. 2.3.1. Overview of clustering methods # A comparison of the clustering algorithms in scikit-learn # Method name Parameters Scalability Usecase Geometry (metric used) K-Means number of clusters Very large n_samples , medium n_clusters with MiniBatch code General-purpose, even cluster size, flat geometry, not too many clusters, inductive Distances between points Affinity propagation damping, sample preference Not scalable with n_samples Many clusters, uneven cluster size, non-flat geometry, inductive Graph distance (e.g. nearest-neighbor graph) Mean-shift bandwidth Not scalable with n_samples Many clusters, uneven cluster size, non-flat geometry, inductive Distances between points Spectral clustering number of clusters Medium n_samples , small n_clusters Few clusters, even cluster size, non-flat geometry, transductive Graph distance (e.g. nearest-neighbor graph) Ward hierarchical clustering number of clusters or distance threshold Large n_samples and n_clusters Many clusters, possibly connectivity constraints, transductive Distances between points Agglomerative clustering number of clusters or distance threshold, linkage type, distance Large n_samples and n_clusters Many clusters, possibly connectivity constraints, non Euclidean distances, transductive Any pairwise distance DBSCAN neighborhood size Very large n_samples , medium n_clusters Non-flat geometry, uneven cluster sizes, outlier removal, transductive Distances between nearest points HDBSCAN minimum cluster membership, minimum point neighbors large n_samples , medium n_clusters Non-flat geometry, uneven cluster sizes, outlier removal, transductive, hierarchical, variable cluster density Distances between nearest points OPTICS minimum cluster membership Very large n_samples , large n_clusters Non-flat geometry, uneven cluster sizes, variable cluster density, outlier removal, transductive Distances between points Gaussian mixtures many Not scalable Flat geometry, good for density estimation, inductive Mahalanobis distances to centers BIRCH branching factor, threshold, optional global clusterer. Large n_clusters and n_samples Large dataset, outlier removal, data reduction, inductive Euclidean distance between points Bisecting K-Means number of clusters Very large n_samples , medium n_clusters General-purpose, even cluster size, flat geometry, no empty clusters, inductive, hierarchical Distances between points Non-flat geometry clustering is useful when the clusters have a specific shape, i.e. a non-flat manifold, and the standard euclidean distance is not the right metric. This case arises in the two top rows of the figure above. Gaussian mixture models, useful for clustering, are described in another chapter of the documentation dedicated to mixture models. KMeans can be seen as a special case of Gaussian mixture model with equal covariance per component. Transductive clustering methods (in contrast to inductive clustering methods) are not designed to be applied to new, unseen data. 2.3.2. K-means # The KMeans algorithm clusters data by trying to separate samples in n groups of equal variance, minimizing a criterion known as the inertia or within-cluster sum-of-squares (see below). This algorithm requires the number of clusters to be specified. It scales well to large numbers of samples and has been used across a large range of application areas in many different fields. The k-means algorithm divides a set of \(N\) samples \(X\) into \(K\) disjoint clusters \(C\) , each described by the mean \(\mu_j\) of the samples in the cluster. The means are commonly called the cluster “centroids”; note that they are not, in general, points from \(X\) , although they live in the same space. The K-means algorithm aims to choose centroids that minimise the inertia , or within-cluster sum-of-squares criterion : \[\sum_{i=0}^{n}\min_{\mu_j \in C}(||x_i - \mu_j||^2)\] Inertia can be recognized as a measure of how internally coherent clusters are. It suffers from various drawbacks: Inertia makes the assumption that clusters are convex and isotropic, which is not always the case. It responds poorly to elongated clusters, or manifolds with irregular shapes. Inertia is not a normalized metric: we just know that lower values are better and zero is optimal. But in very high-dimensional spaces, Euclidean distances tend to become inflated (this is an instance of the so-called “curse of dimensionality”). Running a dimensionality reduction algorithm such as Principal component analysis (PCA) prior to k-means clustering can alleviate this problem and speed up the computations. For more detailed descriptions of the issues shown above and how to address them, refer to the examples Demonstration of k-means assumptions and Selecting the number of clusters with silhouette analysis on KMeans clustering . K-means is often referred to as Lloyd’s algorithm. In basic terms, the algorithm has three steps. The first step chooses the initial centroids, with the most basic method being to choose \(k\) samples from the dataset \(X\) . After initialization, K-means consists of looping between the two other steps. The first step assigns each sample to its nearest centroid. The second step creates new centroids by taking the mean value of all of the samples assigned to each previous centroid. The difference between the old and the new centroids are computed and the algorithm repeats these last two steps until this value is less than a threshold. In other words, it repeats until the centroids do not move significantly. K-means is equivalent to the expectation-maximization algorithm with a small, all-equal, diagonal covariance matrix. The algorithm can also be understood through the concept of Voronoi diagrams . First the Voronoi diagram of the points is calculated using the current centroids. Each segment in the Voronoi diagram becomes a separate cluster. Secondly, the centroids are updated to the mean of each segment. The algorithm then repeats this until a stopping criterion is fulfilled. Usually, the algorithm stops when the relative decrease in the objective function between iterations is less than the given tolerance value. This is not the case in this implementation: iteration stops when centroids move less than the tolerance. Given enough time, K-means will always converge, however this may be to a local minimum. This is highly dependent on the initialization of the centroids. As a result, the computation is often done several times, with different initializations of the centroids. One method to help address this issue is the k-means++ initialization scheme, which has been implemented in scikit-learn (use the init='k-means++' parameter). This initializes the centroids to be (generally) distant from each other, leading to probably better results than random initialization, as shown in the reference. For detailed examples of comparing different initialization schemes, refer to A demo of K-Means clustering on the handwritten digits data and Empirical evaluation of the impact of k-means initialization . K-means++ can also be called independently to select seeds for other clustering algorithms, see sklearn.cluster.kmeans_plusplus for details and example usage. The algorithm supports sample weights, which can be given by a parameter sample_weight . This allows to assign more weight to some samples when computing cluster centers and values of inertia. For example, assigning a weight of 2 to a sample is equivalent to adding a duplicate of that sample to the dataset \(X\) . Examples Clustering text documents using k-means : Document clustering using KMeans and MiniBatchKMeans based on sparse data An example of K-Means++ initialization : Using K-means++ to select seeds for other clustering algorithms. 2.3.2.1. Low-level parallelism # KMeans benefits from OpenMP based parallelism through Cython. Small chunks of data (256 samples) are processed in parallel, which in addition yields a low memory footprint. For more details on how to control the number of threads, please refer to our Parallelism notes. Examples Demonstration of k-means assumptions : Demonstrating when k-means performs intuitively and when it does not A demo of K-Means clustering on the handwritten digits data : Clustering handwritten digits References # “k-means++: The advantages of careful seeding” Arthur, David, and Sergei Vassilvitskii, Proceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms , Society for Industrial and Applied Mathematics (2007) 2.3.2.2. Mini Batch K-Means # The MiniBatchKMeans is a variant of the KMeans algorithm which uses mini-batches to reduce the computation time, while still attempting to optimise the same objective function. Mini-batches are subsets of the input data, randomly sampled in each training iteration. These mini-batches drastically reduce the amount of computation required to converge to a local solution. In contrast to other algorithms that reduce the convergence time of k-means, mini-batch k-means produces results that are generally only slightly worse than the sta
--------------------------------------------------------------------------------

